library(GeoModels)
ctv::install.views("Econometrics")
ctv::install.views("Databases")
ctv::install.views("Distributions")
ctv::install.views("ExperimentalDesign")
ctv::install.views("Finance")
ctv::install.views("Graphics")
ctv::install.views("HighPerformanceComputing")
ctv::install.views("Multivariate")
ctv::install.views("NaturalLanguageProcessing")
ctv::install.views("OfficialStatistics")
ctv::install.views("Robust")
ctv::install.views("SocialSciences")
ctv::install.views("Spatial")
ctv::install.views("Survival")
ctv::install.views("TimeSeries")
install.packages("devtools")
devtools
?devtools::install_github
devtools::install_github("vmoprojs/GeoModels")
devtools::install_github("vmoprojs/GeoModels")
install.packages("gpuR")
install.packages('gpuR')
devtools::install_github("cdeterman/gpuR")
A <- seq.int(from=0, to=999)
B <- seq.int(from=1000, to=1)
gpuA <- gpuVector(A)
gpuB <- gpuVector(B)
C <- A + B
gpuC <- gpuA + gpuB
all(C == gpuC)
library(gpuR)
A <- seq.int(from=0, to=999)
B <- seq.int(from=1000, to=1)
gpuA <- gpuVector(A)
gpuB <- gpuVector(B)
C <- A + B
gpuC <- gpuA + gpuB
all(C == gpuC)
devtools::install_github("vmoprojs/GeoModels",dependencies = "Suggests")
install.packages("rgl")
library(rgl)
library(rgl)
X11()
quartz()
library(rgl)
x11()
X11()
source('http://callr.org/install#HenrikBengtsson/R.devices.rgl')
library('R.devices.rgl')
library('R.devices.rgl')
x11()
X11()
capabilities()
library('R.devices.rgl')
X11()
library(rgl)
devtools::install_github("vmoprojs/GeoModels",dependencies = "Suggests")
devtools::install_github("vmoprojs/GeoModels-OCL",dependencies = "Suggests")
?rgl.useNULL fu
?rgl.useNUL
?rgl.useNULL
rgl.useNULL()
print(Sys.setenv(RGL_USE_NULL=TRUE))  # `A+C` could also be used
Sys.getenv("RGL_USE_NULL")
Sys.getenv("RGL_USE_NULL")
Sys.setenv(RGL_USE_NULL=TRUE)
Sys.getenv("RGL_USE_NULL")
library(rgl)
?Sys.setenv
require(rgl)
rgl.useNULL()
rgl::rgl.useNULL()
HyperNow <- function(a,b,c,x,res)
{
sol = .C("hypergeo_call",aa = as.double(a),bb = as.double(b),cc = as.double(c),
dd = as.double(x),ee = as.double(res))
return(sol$ee)
}
HyperNow <- function(a,b,c,x,res)
{
sol = .C("hypergeo_call",aa = as.double(a),bb = as.double(b),cc = as.double(c),
dd = as.double(x),ee = as.double(res),PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)
return(sol$ee)
}
HyperNow(4,6,8,0.9,0) #440.8084
.C("hypergeo_call",aa = as.double(a),bb = as.double(b),cc = as.double(c),
dd = as.double(x),ee = as.double(res),PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)
# dyn.load("hyperGeo.so")
a=4;b=6;c=8;x=0.9;res=0
HyperNow(a,b,c,x,res) #440.8084
.C("hypergeo_call",aa = as.double(a),bb = as.double(b),cc = as.double(c),
dd = as.double(x),ee = as.double(res),PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)
# dyn.load("hyperGeo.so")
a=4;b=6;c=8;x=0.9;res=0
.C("hypergeo_call",aa = as.double(a),bb = as.double(b),cc = as.double(c),
dd = as.double(x),ee = as.double(res),PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)
# dyn.load("hyperGeo.so")
a=4;b=6;c=8;x=0.9;res=0
GeoModels::HyperNow(a,b,c,x,res) #440.8084
HyperNow(4,6,8,0.995,0) #3870721188
GeoModels::HyperNow(4,6,8,0.995,0) #3870721188
x =0.5;y = 0.5
hyp2f1(1,2,5,x)*hyp2f1(3,4,6,y)
GeoModels::HyperNow(1,2,5,x)*GeoModels::HyperNow(3,4,6,y)
GeoModels::HyperNow(1,2,5,x,0)*GeoModels::HyperNow(3,4,6,y,0)
x =0.25;y = 0.5
GeoModels::HyperNow(1,2,5,x,0)*GeoModels::HyperNow(3,4,6,y,0)
x =0.25;y = 0.5
GeoModels::HyperNow(1,2,5,x,0)*GeoModels::HyperNow(3,4,6,y,0)
GeoModels::HyperNow(1,1,1,x,0)*GeoModels::HyperNow(1,1,1,y,0)
x =0.25;y = 0.5
GeoModels::HyperNow(1,2,5,x,0)*GeoModels::HyperNow(3,4,6,y,0)
x =0.25;y = 0.5
GeoModels::HyperNow(1,1,1,x,0)*GeoModels::HyperNow(1,1,1,y,0)
col2 = c("#b72b7f","#2ba5b7","#3e8236")
col2 = c("#e65353","#62e653","#53a4e6")
col2 = c("#b72b7f","#2ba5b7","#3e8236")
col1 = c("#e65353","#62e653","#53a4e6")
col1 = setNames(col1, unique(iris$Species))
iris %>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
library(plotly)
col2 = c("#b72b7f","#2ba5b7","#3e8236")
col1 = c("#e65353","#62e653","#53a4e6")
col2 = setNames(col2, unique(iris$Species))
col1 = setNames(col1, unique(iris$Species))
iris %>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
)
iris %>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
iris %>%
plotly_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = (colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = (colors = col2))
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1))
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
table(iris$Species)
?add_trace
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2),labels = FALSE)
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2),labels = FALSE)
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2),labels = "")
iris %>%
plot_ly()%>%
add_trace(type ='scatter',x = ~Sepal.Length, y = 0.3,
mode = 'markers', color = ~Species,
marker = list(colors = col1)) %>%
add_trace(type ='scatter',x = ~Sepal.Width, y = 0.6,
mode = 'markers', color = ~Species,
marker = list(colors = col2))
digitoVerificador <- function(x)
{
if (nchar(x)== 9)  {x = paste(0,x,sep = "")}
if(nchar(x)!= 10) return("NO VALIDA (deben ser 10 digitos)")
x
x <- as.numeric(strsplit(as.character(x),"")[[1]])
coeficiente <- rep(c(2,1),5)[-10]
s <- (x[1:9]*coeficiente)
s[s>=10] <- s[s>=10]-9
s = floor((sum(s)+10)/10)*10-sum(s)
if(s==x[10]) return("VALIDA") else (return("NO VALIDA (Digito Verificador)"))
}
digitoVerificador(1803526696)
digitoVerificador(1805198619)
digitoVerificador(952581619)
digitoVerificador(1804971529)
digitoVerificador(1805196555)
digitoVerificador(1804295408)
digitoVerificador(1804451464)
digitoVerificador(1894394847)
digitoVerificador(1894394847)
digitoVerificador(1803745056)
digitoVerificador(1803606688)
digitoVerificador(1803605631)
digitoVerificador(1803337409)
digitoVerificador(1850134709)
digitoVerificador(1804019956)
digitoVerificador(1804571774)
digitoVerificador(1805196399)
digitoVerificador(1804934022)
digitoVerificador(1500909682)
digitoVerificador(1803868171)
digitoVerificador(1803730777)
digitoVerificador(1803479599)
digitoVerificador(1804934501)
digitoVerificador(1805047980)
digitoVerificador(1650138637)
digitoVerificador(1805054879)
digitoVerificador(1804503579)
digitoVerificador(1804226346)
digitoVerificador(1804990966)
remove.packages("GeoModels")
setwd("~/Documents/Software/GeoModels/GeoStage/Stage/GeoModels/src")
setwd("~/Documents/Software/GeoModels/GeoStage/Stage/GeoModels/src")
system("R CMD SHLIB GeoModels.o")
system("R CMD SHLIB GeoModels.so")
dyn.load("GeoModels.so")
